{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"render",
				"render\t(App.cpp)"
			],
			[
				"noncopy",
				"noncopyable.hpp\t(Paths.h)"
			],
			[
				"SystemChore",
				"Systems::Choreographer::EventPlayerChanged::id"
			],
			[
				"m_list",
				"m_listboxLayout"
			],
			[
				"sfgui",
				"sfgui_extensions\t(CMakeLists.txt)"
			],
			[
				"_remove_del",
				"_remove_delayed_selection_unlogged"
			],
			[
				"_remove_d",
				"_remove_delayed_selection_logged\t(redis_helper.rb)"
			],
			[
				"censored",
				"config.censored_values_key_regex\t(yellogger.rb)"
			],
			[
				"mock_redi",
				"mock_redis_client"
			],
			[
				"is_logging",
				"is_logging_enabled_for_job?\t(redis_helper.rb)"
			],
			[
				"_app",
				"_append_request_info_to_logs\t(yellogger.rb)"
			],
			[
				"_append",
				"_append_current_user_to_logs\t(yellogger.rb)"
			],
			[
				"end",
				"end"
			],
			[
				"_test_",
				"_test_method_no_replacement"
			],
			[
				"sanitize_messa",
				"sanitize_message_param"
			],
			[
				"stripp",
				"stripped_and_decoded_string"
			],
			[
				"dec",
				"decoded_entity_string"
			],
			[
				"danger",
				"dangerous_tags_string"
			],
			[
				"and",
				"and_return"
			],
			[
				"ta",
				"takes_args_as_a_hash?\t(base_job.rb)"
			],
			[
				"serial_enqu",
				"serial_enqueue_hash_job"
			],
			[
				"is_",
				"is_logging_enabled_for_job?"
			],
			[
				"schedul",
				"scheduler_id_present"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 332 files for \"the_desktop\" (case sensitive, whole word)\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.cpp:\n  183  \n  184    // Set the map view.\n  185:   m_mapView.reset(NEW MapView2D(\"MainMapView\", game_map, the_desktop.getSize()));\n  186  \n  187    // Get the map view ready.\n  ...\n  283          case GameInputState::Map:\n  284            m_currentInputState = GameInputState::MessageLog;\n  285:           //the_desktop.getChild(\"MessageLogView\").setGlobalFocus(true);\n  286            return false;\n  287  \n  288          case GameInputState::MessageLog:\n  289            m_currentInputState = GameInputState::Map;\n  290:           //the_desktop.getChild(\"StatusArea\").setGlobalFocus(true);\n  291            return false;\n  292  \n  ...\n  978    {\n  979      auto info = static_cast<App::EventAppWindowResized const&>(event);\n  980:     the_desktop.setSize({ info.newSize.x, info.newSize.y });\n  981:     //the_desktop.getChild(\"MessageLogView\").setRelativeDimensions(calcMessageLogDims());\n  982:     the_desktop.getChild(\"InventoryArea\").setRelativeDimensions(calcInventoryDims());\n  983:     //the_desktop.getChild(\"StatusArea\").setRelativeDimensions(calcStatusAreaDims());\n  984      return false;\n  985    }\n  ...\n 1078  {\n 1079    sf::IntRect statusAreaDims;\n 1080:   sf::IntRect invAreaDims = the_desktop.getChild(\"InventoryArea\").getRelativeDimensions();\n 1081    auto& config = Config::settings();\n 1082  \n ....\n 1091  sf::IntRect AppStateGameMode::calcInventoryDims()\n 1092  {\n 1093:   //sf::IntRect messageLogDims = the_desktop.getChild(\"MessageLogView\").getRelativeDimensions();\n 1094    sf::IntRect inventoryAreaDims;\n 1095    auto& config = Config::settings();\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateMainMenu.cpp:\n   28  //SFMLEventResult AppStateMainMenu::handleSFMLEvent(sf::Event& event)\n   29  //{\n   30: //  SFMLEventResult result = the_desktop.handleSFMLEvent(event);\n   31  //\n   32  //  if (result != SFMLEventResult::Handled)\n\n10 matches across 2 files\n\n\nSearching 332 files for \"the_desktop\" (case sensitive, whole word)\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateMainMenu.cpp:\n   28  //SFMLEventResult AppStateMainMenu::handleSFMLEvent(sf::Event& event)\n   29  //{\n   30: //  SFMLEventResult result = the_desktop.handleSFMLEvent(event);\n   31  //\n   32  //  if (result != SFMLEventResult::Handled)\n\n1 match in 1 file\n\n\nSearching 332 files for \"using fs\" (case sensitive, whole word)\n\n0 matches\n\nSearching 332 files for \"using fs\" (case sensitive)\n\n0 matches\n\nSearching 332 files for \"fs\" (case sensitive)\n\n/home/greglindsey/personal/projects/MetaHack/actions/ActionAttack.cpp:\n   75      IntVec2 coords = position.coords();\n   76      MapID map = position.map();\n   77:     IntVec2 offset = (IntVec2)new_direction;\n   78:     int x_new = coords.x + offset.x;\n   79:     int y_new = coords.y + offset.y;\n   80      IntVec2 map_size = MAPS.get(map).getSize();\n   81  \n\n/home/greglindsey/personal/projects/MetaHack/actions/ActionMove.cpp:\n   75        IntVec2 coords = position.coords();\n   76        MapID map = position.map();\n   77:       IntVec2 offset = (IntVec2)new_direction;\n   78:       int x_new = coords.x + offset.x;\n   79:       int y_new = coords.y + offset.y;\n   80        IntVec2 map_size = gameState.maps().get(map).getSize();\n   81  \n\n/home/greglindsey/personal/projects/MetaHack/config/Bible.cpp:\n   12  \n   13  // Namespace aliases\n   14: namespace fs = boost::filesystem;\n   15  \n   16  namespace Config\n   ..\n   46  \n   47        FileName jsonfile_string = resourcesPath + \"/\" + resource_string + \".json\";\n   48:       fs::path jsonfile_path = fs::path(jsonfile_string);\n   49        FileName luafile_string = resourcesPath + \"/\" + resource_string + \".lua\";\n   50:       fs::path luafile_path = fs::path(luafile_string);\n   51  \n   52        /// Try to load this Entity's JSON metadata.\n   53:       if (fs::exists(jsonfile_path))\n   54        {\n   55          try\n   56          {\n   57:           std::ifstream ifs(jsonfile_string);\n   58:           categoryData << ifs;\n   59          }\n   60          catch (std::exception& e)\n   ..\n  101  \n  102        /// Try to load and run this Entity's Lua script.\n  103:       if (fs::exists(luafile_path))\n  104        {\n  105          GAME.lua().require(resource_string, true);\n\n/home/greglindsey/personal/projects/MetaHack/config/Settings.cpp:\n   32      set(\"window-border-width\", 2);\n   33      set(\"window-handle-size\", 3);\n   34:     set(\"window-text-offset\", RealVec2(3, 3));\n   35      set(\"tile-highlight-border-width\", 2);\n   36      set(\"inventory-area-width\", 300);\n\n/home/greglindsey/personal/projects/MetaHack/config/Strings.cpp:\n   12  {\n   13    // Namespace aliases\n   14:   namespace fs = boost::filesystem;\n   15    namespace pt = boost::property_tree;\n   16  \n   ..\n   32  \n   33      /// Try to load the requested file.\n   34:     if (fs::exists(filename))\n   35      {\n   36        CLOG(INFO, \"Strings\") << \"Loading \" << filename;\n\n/home/greglindsey/personal/projects/MetaHack/external/cereal/cereal/external/rapidjson/document.h:\n  699  \t\t\\param stackCapacity\tInitial capacity of stack in bytes.\n  700  \t*/\n  701: \tGenericDocument(Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity) : stack_(allocator, stackCapacity), parseError_(0), errorOffset_(0) {}\n  702  \n  703  \t//! Parse JSON text from an input stream.\n  ...\n  714  \t\t\tthis->RawAssign(*stack_.template Pop<ValueType>(1));\t// Add this-> to prevent issue 13.\n  715  \t\t\tparseError_ = 0;\n  716: \t\t\terrorOffset_ = 0;\n  717  \t\t}\n  718  \t\telse {\n  719  \t\t\tparseError_ = reader.GetParseError();\n  720: \t\t\terrorOffset_ = reader.GetErrorOffset();\n  721  \t\t\tClearStack();\n  722  \t\t}\n  ...\n  752  \tconst char* GetParseError() const { return parseError_; }\n  753  \n  754: \t//! Get the offset in character of the parsing error.\n  755: \tsize_t GetErrorOffset() const { return errorOffset_; }\n  756  \n  757  \t//! Get the allocator of this document.\n  ...\n  808  \tinternal::Stack<Allocator> stack_;\n  809  \tconst char* parseError_;\n  810: \tsize_t errorOffset_;\n  811  };\n  812  \n\n/home/greglindsey/personal/projects/MetaHack/external/cereal/cereal/external/rapidjson/reader.h:\n   28  \n   29  #ifndef RAPIDJSON_PARSE_ERROR\n   30: #define RAPIDJSON_PARSE_ERROR(msg, offset) \\\n   31  \tRAPIDJSON_MULTILINEMACRO_BEGIN \\\n   32  \tparseError_ = msg; \\\n   33: \terrorOffset_ = offset; \\\n   34  \tlongjmp(jmpbuf_, 1); \\\n   35  \tRAPIDJSON_MULTILINEMACRO_END\n   ..\n  124  \t\telse {\t\t// some of characters may be non-whitespace\n  125  #ifdef _MSC_VER\t\t// Find the index of first non-whitespace\n  126: \t\t\tunsigned long offset;\n  127: \t\t\tif (_BitScanForward(&offset, r))\n  128: \t\t\t\treturn p + offset;\n  129  #else\n  130  \t\t\tif (r != 0)\n  131: \t\t\t\treturn p + __builtin_ffs(r) - 1;\n  132  #endif\n  133  \t\t}\n  ...\n  161  \t\telse {\t\t// some of characters may be non-whitespace\n  162  #ifdef _MSC_VER\t\t// Find the index of first non-whitespace\n  163: \t\t\tunsigned long offset;\n  164: \t\t\tif (_BitScanForward(&offset, r))\n  165: \t\t\t\treturn p + offset;\n  166  #else\n  167  \t\t\tif (r != 0)\n  168: \t\t\t\treturn p + __builtin_ffs(r) - 1;\n  169  #endif\n  170  \t\t}\n  ...\n  213  \t\t\\param stackCapacity stack capacity in bytes for storing a single decoded string.  (Only use for non-destructive parsing)\n  214  \t*/\n  215: \tGenericReader(Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity) : stack_(allocator, stackCapacity), parseError_(0), errorOffset_(0) {}\n  216  \n  217  \t//! Parse JSON text.\n  ...\n  226  \tbool Parse(Stream& stream, Handler& handler) {\n  227  \t\tparseError_ = 0;\n  228: \t\terrorOffset_ = 0;\n  229  \n  230  #ifdef _MSC_VER\n  ...\n  261  \tbool HasParseError() const { return parseError_ != 0; }\n  262  \tconst char* GetParseError() const { return parseError_; }\n  263: \tsize_t GetErrorOffset() const { return errorOffset_; }\n  264  \n  265  private:\n  ...\n  735  \tjmp_buf jmpbuf_;\t\t\t\t\t//!< setjmp buffer for fast exit from nested parsing function calls.\n  736  \tconst char* parseError_;\n  737: \tsize_t errorOffset_;\n  738  }; // class GenericReader\n  739  \n\n/home/greglindsey/personal/projects/MetaHack/external/easylogging++-9.95/include/easylogging++.h:\n  377  #include <functional>\n  378  #include <algorithm>\n  379: #include <fstream>\n  380  #include <iostream>\n  381  #include <sstream>\n  ...\n  506  typedef std::wstring string_t;\n  507  typedef std::wstringstream stringstream_t;\n  508: typedef std::wfstream fstream_t;\n  509  typedef std::wostream ostream_t;\n  510  #else\n  ...\n  519  typedef std::string string_t;\n  520  typedef std::stringstream stringstream_t;\n  521: typedef std::fstream fstream_t;\n  522  typedef std::ostream ostream_t;\n  523  #endif  // defined(ELPP_UNICODE)\n  ...\n  886    LevelShort = 1 << 15\n  887  };\n  888: /// @brief A subsecond precision class containing actual width and offset of the subsecond part\n  889  class SubsecondPrecision {\n  890   public:\n  ...\n  896    }\n  897    bool operator==(const SubsecondPrecision& ssPrec) {\n  898:     return m_width == ssPrec.m_width && m_offset == ssPrec.m_offset;\n  899    }\n  900    int m_width;\n  901:   unsigned int m_offset;\n  902   private:\n  903    void init(int width);\n  ...\n 1095   public:\n 1096    /// @brief Creates new out file stream for specified filename.\n 1097:   /// @return Pointer to newly created fstream or nullptr\n 1098:   static base::type::fstream_t* newFileStream(const std::string& filename);\n 1099  \n 1100    /// @brief Gets size of file provided in stream\n 1101:   static std::size_t getSizeOfFile(base::type::fstream_t* fs);\n 1102  \n 1103    /// @brief Determines whether or not provided path exist in current file system\n ....\n 1948  \n 1949  namespace base {\n 1950: typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;\n 1951  typedef std::map<std::string, FileStreamPtr> LogStreamsReferenceMap;\n 1952  /// @brief Configurations with data types.\n ....\n 1980    const base::MillisecondsWidth& millisecondsWidth(Level level = Level::Global);\n 1981    bool performanceTracking(Level level = Level::Global);\n 1982:   base::type::fstream_t* fileStream(Level level);\n 1983    std::size_t maxLogFileSize(Level level);\n 1984    std::size_t logFlushThreshold(Level level);\n ....\n 2305    void flush(void);\n 2306  \n 2307:   void flush(Level level, base::type::fstream_t* fs);\n 2308  \n 2309    inline bool isFlushNeeded(Level level) {\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.cpp:\n  996        m_gameState->addMessage(\"Dumping game state to dump.json...\");\n  997        json gameStateJSON = gameState();\n  998:       std::ofstream of(\"dump.json\");\n  999        of << gameStateJSON.dump(2);\n 1000        m_gameState->addMessage(\"...Dump complete.\");\n\n/home/greglindsey/personal/projects/MetaHack/game/GameState.cpp:\n   14  \n   15  // Namespace aliases\n   16: namespace fs = boost::filesystem;\n   17  \n   18  GameState* GameState::s_instance = nullptr;\n\n/home/greglindsey/personal/projects/MetaHack/game_windows/StatusArea.cpp:\n  151  //   sf::IntRect pane_dims = getRelativeDimensions();\n  152  //   EntityId player = components.globals.player();\n  153: //   RealVec2 origin = config.get(\"window-text-offset\");\n  154  \n  155  //   Color text_color = config.get(\"text-color\");\n  ...\n  161  //   float attrib_spacing = 75.0f;\n  162  \n  163: //   // Text offsets relative to the background rectangle.\n  164  //   sf::Text render_text;\n  165  //   render_text.setFont(the_default_font);\n\n/home/greglindsey/personal/projects/MetaHack/include/stdafx.h:\n   23  #include <deque>\n   24  #include <exception>\n   25: #include <fstream>\n   26  #include <functional>\n   27  #include <iomanip>\n\n/home/greglindsey/personal/projects/MetaHack/inventory/InventoryArea.cpp:\n  134    // float item_spacing_y = 4.0f;\n  135  \n  136:   // // Text offsets relative to the background rectangle.\n  137:   // RealVec2 text_offset = config.get(\"window-text-offset\");\n  138  \n  139    // // Get a reference to the location we're referring to.\n  ...\n  146  \n  147    // // Start at the top and work down.\n  148:   // float text_coord_x = text_offset.x;\n  149:   // float text_coord_y = text_offset.y + (line_spacing_y * 1.5f);\n  150  \n  151    // auto& inventory = COMPONENTS.inventory[viewed_thing];\n\n/home/greglindsey/personal/projects/MetaHack/libraries/luajit-2.0/include/lua.h:\n  163  LUA_API void  (lua_pushlstring) (lua_State *L, const char *s, size_t l);\n  164  LUA_API void  (lua_pushstring) (lua_State *L, const char *s);\n  165: LUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,\n  166                                                        va_list argp);\n  167: LUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);\n  168  LUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);\n  169  LUA_API void  (lua_pushboolean) (lua_State *L, int b);\n\n/home/greglindsey/personal/projects/MetaHack/map/MapCrossCorridor.cpp:\n   13  unsigned int MapCrossCorridor::maxRetries = 100;\n   14  \n   15: // Local typedefs\n   16  typedef boost::random::uniform_int_distribution<> uniform_int_dist;\n   17  \n\n/home/greglindsey/personal/projects/MetaHack/map/MapDonutRoom.cpp:\n   37      if (direction == Direction::North)\n   38      {\n   39:       int offset = the_RNG.pick_uniform(0, rect.width - 1);\n   40  \n   41        rect.top = starting_coords.y - rect.height;\n   42:       rect.left = starting_coords.x - offset;\n   43      }\n   44      else if (direction == Direction::South)\n   45      {\n   46:       int offset = the_RNG.pick_uniform(0, rect.width - 1);\n   47  \n   48        rect.top = starting_coords.y + 1;\n   49:       rect.left = starting_coords.x - offset;\n   50      }\n   51      else if (direction == Direction::West)\n   52      {\n   53:       int offset = the_RNG.pick_uniform(0, rect.height - 1);\n   54  \n   55:       rect.top = starting_coords.y - offset;\n   56        rect.left = starting_coords.x - rect.width;\n   57      }\n   58      else if (direction == Direction::East)\n   59      {\n   60:       int offset = the_RNG.pick_uniform(0, rect.height - 1);\n   61  \n   62:       rect.top = starting_coords.y - offset;\n   63        rect.left = starting_coords.x + 1;\n   64      }\n\n/home/greglindsey/personal/projects/MetaHack/map/MapLRoom.cpp:\n   42      if (direction == Direction::North)\n   43      {\n   44:       int offset = the_RNG.pick_uniform(0, horiz_rect.width - 1);\n   45  \n   46        horiz_rect.top = starting_coords.y - horiz_rect.height;\n   47:       horiz_rect.left = starting_coords.x - offset;\n   48  \n   49        vert_rect.top = horiz_rect.top - vert_rect.height;\n   ..\n   54      else if (direction == Direction::South)\n   55      {\n   56:       int offset = the_RNG.pick_uniform(0, horiz_rect.width - 1);\n   57  \n   58        horiz_rect.top = starting_coords.y + 1;\n   59:       horiz_rect.left = starting_coords.x - offset;\n   60  \n   61        vert_rect.top = horiz_rect.top + horiz_rect.height;\n   ..\n   66      else if (direction == Direction::West)\n   67      {\n   68:       int offset = the_RNG.pick_uniform(0, vert_rect.height - 1);\n   69  \n   70:       vert_rect.top = starting_coords.y - offset;\n   71        vert_rect.left = starting_coords.x - vert_rect.width;\n   72  \n   ..\n   78      else if (direction == Direction::East)\n   79      {\n   80:       int offset = the_RNG.pick_uniform(0, vert_rect.height - 1);\n   81  \n   82:       vert_rect.top = starting_coords.y - offset;\n   83        vert_rect.left = starting_coords.x + 1;\n   84  \n\n/home/greglindsey/personal/projects/MetaHack/map/MapRoom.cpp:\n   35      if (direction == Direction::North)\n   36      {\n   37:       int offset = the_RNG.pick_uniform(0, rect.width - 1);\n   38  \n   39        rect.top = starting_coords.y - rect.height;\n   40:       rect.left = starting_coords.x - offset;\n   41      }\n   42      else if (direction == Direction::South)\n   43      {\n   44:       int offset = the_RNG.pick_uniform(0, rect.width - 1);\n   45  \n   46        rect.top = starting_coords.y + 1;\n   47:       rect.left = starting_coords.x - offset;\n   48      }\n   49      else if (direction == Direction::West)\n   50      {\n   51:       int offset = the_RNG.pick_uniform(0, rect.height - 1);\n   52  \n   53:       rect.top = starting_coords.y - offset;\n   54        rect.left = starting_coords.x - rect.width;\n   55      }\n   56      else if (direction == Direction::East)\n   57      {\n   58:       int offset = the_RNG.pick_uniform(0, rect.height - 1);\n   59  \n   60:       rect.top = starting_coords.y - offset;\n   61        rect.left = starting_coords.x + 1;\n   62      }\n\n/home/greglindsey/personal/projects/MetaHack/tilesheet/TileSheet.cpp:\n  313    FileName resourceString = Config::paths().resources() + \"/entity/\" + stringPair.second;\n  314    FileName pngFileString = resourceString + \".png\";\n  315:   fs::path pngFilePath = fs::path(pngFileString);\n  316    m_triedToLoad.insert(category);\n  317  \n  318:   if (fs::exists(pngFilePath))\n  319    {\n  320      UintVec2 tileLocation;\n\n/home/greglindsey/personal/projects/MetaHack/views/EntityView2D.cpp:\n  142    auto& entity = getEntity();\n  143    auto& categoryData = Config::bible().categoryData(COMPONENTS.category[entity]);\n  144:   UintVec2 offset;\n  145  \n  146    // Get tile coordinates on the sheet.\n  147    UintVec2 start_coords = the_tilesheet.getTileSheetCoords(COMPONENTS.category[entity]);\n  148  \n  149:   // If the entity has the \"animated\" component, call the Lua function to get the offset (tile to choose).\n  150    if (categoryData[\"components\"].count(\"animated\") > 0)\n  151    {\n  152:     offset = GAME.lua().callEntityFunction(\"get_tile_offset\", entity, frame, UintVec2(0, 0));\n  153    }\n  154  \n  155    // Add them to get the resulting coordinates.\n  156:   UintVec2 tile_coords = start_coords + offset;\n  157  \n  158    return tile_coords;\n\n/home/greglindsey/personal/projects/MetaHack/views/MapTileView2D.cpp:\n   24    :\n   25    MapTileView(map_tile),\n   26:   m_tileOffset{ 0 } //m_tileOffset{ pick_uniform(0, 4) }\n   27  {\n   28  }\n   ..\n   37    auto entity = getMapTile().getFloorEntity();\n   38    auto& categoryData = Config::bible().categoryData(COMPONENTS.category[entity]);\n   39:   UintVec2 offset;\n   40  \n   41    // Get tile coordinates on the sheet.\n   42    UintVec2 start_coords = the_tilesheet.getTileSheetCoords(COMPONENTS.category[entity]);\n   43  \n   44:   UintVec2 tile_coords(start_coords.x + m_tileOffset, start_coords.y);\n   45    return tile_coords;\n   46  }\n   ..\n   51    auto entity = getMapTile().getSpaceEntity();\n   52    auto& categoryData = Config::bible().categoryData(COMPONENTS.category[entity]);\n   53:   UintVec2 offset;\n   54  \n   55    // Get tile coordinates on the sheet.\n   56    UintVec2 start_coords = the_tilesheet.getTileSheetCoords(COMPONENTS.category[entity]);\n   57  \n   58:   UintVec2 tile_coords(start_coords.x + m_tileOffset, start_coords.y);\n   59    return tile_coords;\n   60  }\n   ..\n   66    UintVec2 start_coords = the_tilesheet.getTileSheetCoords(COMPONENTS.category[entity]);\n   67  \n   68:   /// Call the Lua function to get the offset (tile to choose).\n   69:   UintVec2 offset = GAME.lua().callEntityFunction(\"get_tile_offset\", entity, frame, UintVec2(0, 0));\n   70  \n   71    /// Add them to get the resulting coordinates.\n   72:   UintVec2 tile_coords = start_coords + offset;\n   73  \n   74    return tile_coords;\n\n/home/greglindsey/personal/projects/MetaHack/views/MapTileView2D.h:\n   84  \n   85  private:\n   86:   /// Random tile offset.\n   87:   int m_tileOffset;\n   88  };\n   89  \n\n117 matches across 22 files\n\n\nSearching 332 files for \"handle_key_press\" (case sensitive)\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.cpp:\n  265  }\n  266  \n  267: bool AppStateGameMode::handle_key_press(UIEvents::EventKeyPressed const& key)\n  268  {\n  269    auto& game = gameState();\n  ...\n 1014    {\n 1015      auto info = static_cast<UIEvents::EventKeyPressed const&>(event);\n 1016:     bool keep_broadcasting = handle_key_press(info);\n 1017      return !keep_broadcasting;\n 1018    }\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.h:\n   62    virtual bool render(sf::RenderTexture& texture, int frame) override;\n   63  \n   64:   bool handle_key_press(UIEvents::EventKeyPressed const& key);\n   65    bool handle_mouse_wheel(UIEvents::EventMouseWheelMoved const& wheel);\n   66    //sf::IntRect calcMessageLogDims();\n\n3 matches across 2 files\n\n\nSearching 357 files for \"handle_key_press\" (case sensitive)\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.cpp:\n  281  }\n  282  \n  283: bool AppStateGameMode::handle_key_press(UIEvents::EventKeyPressed const& key)\n  284  {\n  285    auto& game = gameState();\n  ...\n 1034    {\n 1035      auto info = static_cast<UIEvents::EventKeyPressed const&>(event);\n 1036:     bool keep_broadcasting = handle_key_press(info);\n 1037      return !keep_broadcasting;\n 1038    }\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.h:\n   60  protected:\n   61    void renderMap(sf::RenderTexture& texture, int frame);\n   62:   bool handle_key_press(UIEvents::EventKeyPressed const& key);\n   63    bool handle_mouse_wheel(UIEvents::EventMouseWheelMoved const& wheel);\n   64    sf::IntRect calcMessageLogDims();\n\n3 matches across 2 files\n\n\nSearching 333 files for \"UIEvents::EventKeyPressed::id\" (case sensitive)\n\n/home/greglindsey/personal/projects/MetaHack/game/App.cpp:\n   40    EventAppWindowFocusChanged::id,\n   41    EventAppWindowResized::id,\n   42:   UIEvents::EventKeyPressed::id,\n   43    UIEvents::EventMouseDown::id,\n   44    UIEvents::EventMouseUp::id,\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.cpp:\n   66    AppState(stateMachine,\n   67             { App::EventAppWindowResized::id,\n   68:              UIEvents::EventKeyPressed::id },\n   69             \"AppStateGameMode\"),\n   70    m_appWindow{ appWindow },\n   ..\n 1011      return false;\n 1012    }\n 1013:   else if (id == UIEvents::EventKeyPressed::id)\n 1014    {\n 1015      auto info = static_cast<UIEvents::EventKeyPressed const&>(event);\n\n3 matches across 2 files\n\n\nSearching 333 files for \"handleSFMLEvent\" (case sensitive)\n\n/home/greglindsey/personal/projects/MetaHack/game/App.cpp:\n  182  }\n  183  \n  184: void App::handleSFMLEvent(sf::Event& sfmlEvent)\n  185  {\n  186    switch (sfmlEvent.type)\n  ...\n  378        m_desktop.HandleEvent(event);\n  379  \n  380:       handleSFMLEvent(event);\n  381      }\n  382  \n\n/home/greglindsey/personal/projects/MetaHack/game/App.h:\n   88    void run();\n   89  \n   90:   void handleSFMLEvent(sf::Event& sfmlEvent);\n   91  \n   92    sf::RenderWindow& renderWindow();\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateMainMenu.cpp:\n   24  {}\n   25  \n   26: //SFMLEventResult AppStateMainMenu::handleSFMLEvent(sf::Event& event)\n   27  //{\n   28: //  SFMLEventResult result = the_desktop.handleSFMLEvent(event);\n   29  //\n   30  //  if (result != SFMLEventResult::Handled)\n\n5 matches across 3 files\n\n\nSearching 357 files for \"UIEvents::EventKeyPressed\" (case sensitive)\n\n/home/greglindsey/personal/projects/MetaHack/game/App.cpp:\n   40    EventAppWindowFocusChanged::id,\n   41    EventAppWindowResized::id,\n   42:   UIEvents::EventKeyPressed::id,\n   43    UIEvents::EventMouseDown::id,\n   44    UIEvents::EventMouseUp::id,\n   ..\n  246        if (do_key_broadcast)\n  247        {\n  248:         UIEvents::EventKeyPressed event(sfmlEvent.key.code,\n  249                                          sfmlEvent.key.alt,\n  250                                          sfmlEvent.key.control,\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.cpp:\n   71    AppState(stateMachine,\n   72             { App::EventAppWindowResized::id,\n   73:              UIEvents::EventKeyPressed::id },\n   74             \"AppStateGameMode\",\n   75             std::bind(&AppStateGameMode::renderMap, this, std::placeholders::_1, std::placeholders::_2)),\n   ..\n  281  }\n  282  \n  283: bool AppStateGameMode::handle_key_press(UIEvents::EventKeyPressed const& key)\n  284  {\n  285    auto& game = gameState();\n  ...\n 1031      return false;\n 1032    }\n 1033:   else if (id == UIEvents::EventKeyPressed::id)\n 1034    {\n 1035:     auto info = static_cast<UIEvents::EventKeyPressed const&>(event);\n 1036      bool keep_broadcasting = handle_key_press(info);\n 1037      return !keep_broadcasting;\n ....\n 1136  }\n 1137  \n 1138: bool AppStateGameMode::handleKeyPressTargetSelection(EntityId player, UIEvents::EventKeyPressed const& key)\n 1139  {\n 1140    auto& director = systems().director();\n ....\n 1188  }\n 1189  \n 1190: bool AppStateGameMode::handleKeyPressCursorLook(EntityId player, UIEvents::EventKeyPressed const& key)\n 1191  {\n 1192    // *** NON-MODIFIED KEYS ***********************************************\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.h:\n   60  protected:\n   61    void renderMap(sf::RenderTexture& texture, int frame);\n   62:   bool handle_key_press(UIEvents::EventKeyPressed const& key);\n   63    bool handle_mouse_wheel(UIEvents::EventMouseWheelMoved const& wheel);\n   64    sf::IntRect calcMessageLogDims();\n   ..\n   67    sf::IntRect calcInventoryDims();\n   68    bool moveCursor(Direction direction);\n   69:   bool handleKeyPressTargetSelection(EntityId player, UIEvents::EventKeyPressed const& key);\n   70:   bool handleKeyPressCursorLook(EntityId player, UIEvents::EventKeyPressed const& key);\n   71  \n   72    void add_zoom(float zoom_amount);\n\n/home/greglindsey/personal/projects/MetaHack/utilities/GetLetterKey.h:\n   14  /// the player, it returns 0 if the 2/@ key was pressed with shift held down.\n   15  /// If the key pressed was none of these, it returns -1.\n   16: int get_letter_key(UIEvents::EventKeyPressed const& key)\n   17  {\n   18    switch (key.code)\n   ..\n   60  /// Return the direction associated with a keypress, or None if the key does\n   61  /// not correspond to a direction.\n   62: Direction get_direction_key(UIEvents::EventKeyPressed const& key)\n   63  {\n   64    switch (key.code)\n\n13 matches across 4 files\n\n\nSearching 334 files for \"handle_key_press\" (case sensitive)\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.cpp:\n  265  }\n  266  \n  267: bool AppStateGameMode::handle_key_press(UIEvents::EventKeyPressed const& key)\n  268  {\n  269    auto& game = gameState();\n  ...\n 1014    {\n 1015      auto info = static_cast<UIEvents::EventKeyPressed const&>(event);\n 1016:     bool keep_broadcasting = handle_key_press(info);\n 1017      return !keep_broadcasting;\n 1018    }\n\n/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.h:\n   62    virtual bool render(sf::RenderTexture& texture, int frame) override;\n   63  \n   64:   bool handle_key_press(UIEvents::EventKeyPressed const& key);\n   65    bool handle_mouse_wheel(UIEvents::EventMouseWheelMoved const& wheel);\n   66    //sf::IntRect calcMessageLogDims();\n\n3 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 26909,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "game/App.cpp",
			"settings":
			{
				"buffer_size": 11124,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/App.h",
			"settings":
			{
				"buffer_size": 3964,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/AppState.cpp",
			"settings":
			{
				"buffer_size": 454,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/AppState.h",
			"settings":
			{
				"buffer_size": 456,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/AppStateGameMode.cpp",
			"settings":
			{
				"buffer_size": 41261,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/AppStateGameMode.h",
			"settings":
			{
				"buffer_size": 3261,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/AppStateMainMenu.cpp",
			"settings":
			{
				"buffer_size": 1949,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/AppStateMainMenu.h",
			"settings":
			{
				"buffer_size": 901,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/AppStateSplashScreen.cpp",
			"settings":
			{
				"buffer_size": 1179,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game/AppStateSplashScreen.h",
			"settings":
			{
				"buffer_size": 977,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config/Bible.cpp",
			"settings":
			{
				"buffer_size": 4782,
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 24674,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/EntityCollectionGUIListView.cpp",
			"settings":
			{
				"buffer_size": 2055,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/EntityCollectionGUIListView.h",
			"settings":
			{
				"buffer_size": 506,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"stdafx.h\"\n\n#include \"GUIDesktop.h\"\n\n#include \"config/Settings.h\"\n#include \"design_patterns/Object.h\"\n#include \"game/App.h\"\n#include \"services/Service.h\"\n\nnamespace metagui\n{\n  std::unordered_set<EventID> const Desktop::s_eventsEmitted =\n  {\n    EventDragStarted::id,\n    EventDragging::id,\n    EventDragFinished::id\n  };\n\n  Desktop::Desktop(Object& event_parent,\n                   std::string name,\n                   UintVec2 size) :\n    GUIObject{ *this, name, s_eventsEmitted, IntVec2(0, 0), size },\n    m_event_parent{ event_parent }\n  {\n    subscribeTo(App::instance(), EventID::All);\n  }\n\n  Desktop::~Desktop()\n  {\n    unsubscribeFrom(App::instance(), EventID::All);\n  }\n\n  // === PROTECTED METHODS ======================================================\n\n  bool Desktop::onEvent_V(Event const& event)\n  {\n    auto id = event.getId();\n    if (id == EventResized::id)\n    {\n      if (event.subject == getParent())\n      {\n        auto& castEvent = static_cast<EventResized const&>(event);\n        setSize(castEvent.newSize);\n      }\n    }\n    else if (id == UIEvents::EventMouseDown::id)\n    {\n      auto& castEvent = static_cast<UIEvents::EventMouseDown const&>(event);\n      auto& button{ m_button_info[static_cast<unsigned int>(castEvent.button)] };\n      button.pressed = true;\n      button.location = castEvent.location;\n      button.elapsed.restart();\n    }\n    else if (id == UIEvents::EventMouseUp::id)\n    {\n      auto& castEvent = static_cast<UIEvents::EventMouseUp const&>(event);\n      auto& button{ m_button_info[static_cast<unsigned int>(castEvent.button)] };\n      button.pressed = false;\n      button.location = castEvent.location;\n      button.elapsed.restart();\n\n      if (button.dragging)\n      {\n        button.dragging = false;\n        EventDragFinished event{ castEvent.button, castEvent.location };\n        broadcast(event);\n      }\n    }\n    else if (id == UIEvents::EventMouseMoved::id)\n    {\n      auto& castEvent = static_cast<UIEvents::EventMouseMoved const&>(event);\n      m_mouseLocation = castEvent.location;\n\n      /// @todo Handle entities like dragging, resizing\n      for (unsigned int index = 0; index < sf::Mouse::ButtonCount; ++index)\n      {\n        auto& button_info = m_button_info[index];\n\n        if ((button_info.dragging == true) ||\n          (button_info.pressed &&\n           distance(castEvent.location, button_info.location) > EventDragging::dragThreshold))\n        {\n          if (button_info.dragging != true)\n          {\n            button_info.dragging = true;\n            EventDragStarted event{ static_cast<sf::Mouse::Button>(index), button_info.location };\n            broadcast(event);\n          }\n\n          EventDragging event{ static_cast<sf::Mouse::Button>(index), castEvent.location };\n          broadcast(event);\n        }\n      }\n    }\n    else if (id == UIEvents::EventMouseLeft::id)\n    {\n      for (unsigned int index = 0; index < sf::Mouse::ButtonCount; ++index)\n      {\n        auto& button_info = m_button_info[index];\n\n        if (button_info.pressed)\n        {\n          button_info.pressed = false;\n          // Don't update location, just keep it as last seen\n          button_info.elapsed.restart();\n\n          if (button_info.dragging)\n          {\n            button_info.dragging = false;\n            EventDragFinished event{ static_cast<sf::Mouse::Button>(index), button_info.location };\n            broadcast(event);\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  void Desktop::drawPreChildren_(sf::RenderTexture& texture, int frame)\n  {\n  }\n\n}; // end namespace metagui\n",
			"file": "gui/GUIDesktop.cpp",
			"file_size": 3580,
			"file_write_time": 131988710495139516,
			"settings":
			{
				"buffer_size": 3580,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#pragma once\n\n#include \"GUIObject.h\"\n\n// Forward declarations\nclass Object;\n\nnamespace metagui\n{\n  class Desktop : public GUIObject\n  {\n  public:\n    struct MouseButtonInfo\n    {\n      /// Whether this button is pressed.\n      bool pressed = false;\n\n      /// Whether a drag is currently in process with this button.\n      bool dragging = false;\n\n      /// Absolute location of the press or release.\n      IntVec2 location{ 0, 0 };\n\n      /// Time elapsed since the last button state change.\n      /// @todo decouple from SFML\n      sf::Clock elapsed;\n    };\n\n    explicit Desktop(Object& event_parent,\n                     std::string name, \n                     UintVec2 size);\n\n    virtual ~Desktop();\n\n  protected:\n    virtual bool onEvent_V(Event const& event) override;\n\n    virtual void drawPreChildren_(sf::RenderTexture& texture, int frame) override final;\n\n  private:\n    /// The subject from which to receive input events.\n    Object& m_event_parent;\n\n    /// An array of data for each possible mouse button.\n    std::array< MouseButtonInfo, sf::Mouse::ButtonCount > m_button_info;\n\n    /// Constantly updated mouse location.\n    IntVec2 m_mouseLocation;\n\n    /// Static set of events provided by GUIDesktop.\n    static std::unordered_set<EventID> const s_eventsEmitted;\n  };\n}; // end namespace metagui\n",
			"file": "gui/GUIDesktop.h",
			"file_size": 1315,
			"file_write_time": 131988710495139516,
			"settings":
			{
				"buffer_size": 1315,
				"line_ending": "Unix"
			}
		},
		{
			"file": "inventory/InventoryArea.cpp",
			"settings":
			{
				"buffer_size": 13703,
				"line_ending": "Unix"
			}
		},
		{
			"file": "inventory/InventoryArea.h",
			"settings":
			{
				"buffer_size": 1683,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/MapTileView2D.cpp",
			"settings":
			{
				"buffer_size": 20245,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/MapTileView2D.h",
			"settings":
			{
				"buffer_size": 3126,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/MapView.cpp",
			"settings":
			{
				"buffer_size": 1343,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/MapView.h",
			"settings":
			{
				"buffer_size": 1835,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/MapView2D.cpp",
			"settings":
			{
				"buffer_size": 5115,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/MapView2D.h",
			"settings":
			{
				"buffer_size": 1757,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game_windows/MessageLogView.cpp",
			"settings":
			{
				"buffer_size": 4495,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game_windows/MessageLogView.h",
			"settings":
			{
				"buffer_size": 2552,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game_windows/StatusArea.cpp",
			"settings":
			{
				"buffer_size": 11378,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game_windows/StatusArea.h",
			"settings":
			{
				"buffer_size": 1381,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tilesheet/TileSheet.cpp",
			"settings":
			{
				"buffer_size": 12155,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tilesheet/TileSheet.h",
			"settings":
			{
				"buffer_size": 4389,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"CMakeF",
				"CMake Format: Format Selection"
			],
			[
				"CMake Format",
				"CMake Format: Set Path"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"CMake",
				"Set Syntax: CMake"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"Markdown",
				"Set Syntax: Markdown"
			],
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"markdown gfm",
				"Set Syntax: Markdown GFM"
			],
			[
				"sort",
				"SortList: Sort List"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install package control",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 207.800003052,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/greglindsey/personal/projects/MetaHack",
		"/home/greglindsey/personal/projects/MetaHack/build",
		"/home/greglindsey/personal/projects/MetaHack/config",
		"/home/greglindsey/personal/projects/MetaHack/external",
		"/home/greglindsey/personal/projects/MetaHack/game",
		"/home/greglindsey/personal/projects/MetaHack/map",
		"/home/greglindsey/personal/projects/MetaHack/services",
		"/home/greglindsey/personal/projects/MetaHack/types"
	],
	"file_history":
	[
		"/home/greglindsey/personal/projects/MetaHack/game/App.h",
		"/home/greglindsey/personal/projects/MetaHack/views/MapView2D.h",
		"/home/greglindsey/personal/projects/MetaHack/views/MapView2D.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/MapView.h",
		"/home/greglindsey/personal/projects/MetaHack/views/MapView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/inventory/InventoryArea.h",
		"/home/greglindsey/personal/projects/MetaHack/inventory/InventoryArea.cpp",
		"/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.cpp",
		"/home/greglindsey/personal/projects/MetaHack/game/AppState.h",
		"/home/greglindsey/personal/projects/MetaHack/game/App.cpp",
		"/home/greglindsey/personal/projects/MetaHack/gui/GUIWindow.cpp",
		"/home/greglindsey/personal/projects/MetaHack/tilesheet/TileSheet.h",
		"/home/greglindsey/personal/projects/MetaHack/tilesheet/TileSheet.cpp",
		"/home/greglindsey/personal/projects/MetaHack/game_windows/StatusArea.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/MapTileView2D.h",
		"/home/greglindsey/personal/projects/MetaHack/views/MapTileView2D.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/MapTileView.h",
		"/home/greglindsey/personal/projects/MetaHack/gui/GUITitleBar.cpp",
		"/home/greglindsey/personal/projects/MetaHack/gui/GUIObject.cpp",
		"/home/greglindsey/personal/projects/MetaHack/gui/GUIDesktop.cpp",
		"/home/greglindsey/personal/projects/MetaHack/game/GameState.h",
		"/home/greglindsey/personal/projects/MetaHack/game/GameState.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityView2D.h",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityView2D.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityView.h",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityCollectionGUIListView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/config/Bible.cpp",
		"/home/greglindsey/personal/projects/MetaHack/game/AppStateGameMode.h",
		"/home/greglindsey/personal/projects/MetaHack/gui/GUILabel.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/IGraphicViews.h",
		"/home/greglindsey/personal/projects/MetaHack/views/Standard2DGraphicViews.h",
		"/home/greglindsey/personal/projects/MetaHack/views/Standard2DGraphicViews.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/NullGraphicViews.h",
		"/home/greglindsey/personal/projects/MetaHack/views/MapTileStandard2DView.h",
		"/home/greglindsey/personal/projects/MetaHack/views/MapTileStandard2DView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/MapStandard2DView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/systems/SystemGeometry.cpp",
		"/home/greglindsey/personal/projects/MetaHack/utilities/Shortcuts.h",
		"/home/greglindsey/personal/projects/MetaHack/design_patterns/ObjectRegistry.h",
		"/home/greglindsey/personal/projects/MetaHack/design_patterns/Object.h",
		"/home/greglindsey/personal/projects/MetaHack/design_patterns/Object.cpp",
		"/home/greglindsey/personal/projects/MetaHack/game_windows/MessageLogView.h",
		"/home/greglindsey/personal/projects/MetaHack/game_windows/MessageLogView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/gui/GUIObject.h",
		"/home/greglindsey/personal/projects/MetaHack/objects/GameLog.h",
		"/home/greglindsey/personal/projects/MetaHack/objects/GameLog.cpp",
		"/home/greglindsey/personal/projects/MetaHack/design_patterns/ObjectPtr.h",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionAttack.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionClose.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionDie.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionDrop.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionEat.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionFill.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionGet.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionHurl.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionInscribe.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionLock.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionMove.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionOpen.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionPutInto.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionQuaff.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionRead.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionShoot.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionTakeOff.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionTakeOut.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionTurn.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionUnlock.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionUnwield.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionUse.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionWear.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionWait.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/ActionWield.cpp",
		"/home/greglindsey/personal/projects/MetaHack/CMakeLists.txt",
		"/home/greglindsey/personal/projects/MetaHack/lua/LuaFunctions-Global.h",
		"/home/greglindsey/personal/projects/MetaHack/actions/Action.cpp",
		"/home/greglindsey/personal/projects/MetaHack/actions/Action.h",
		"/home/greglindsey/personal/projects/MetaHack/config/Bible.h",
		"/home/greglindsey/personal/projects/MetaHack/services/MessageLog.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/IMessageLog.h",
		"/home/greglindsey/personal/projects/MetaHack/systems/SystemNarrator.cpp",
		"/home/greglindsey/personal/projects/MetaHack/lua/LuaObject.cpp",
		"/home/greglindsey/personal/projects/MetaHack/lua/LuaFunctions-Entity.h",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityStandard2DView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/entity/EntityFactory.cpp",
		"/home/greglindsey/personal/projects/MetaHack/config/Settings.h",
		"/home/greglindsey/personal/projects/MetaHack/config/Settings.cpp",
		"/home/greglindsey/personal/projects/MetaHack/maptile/MapTile.cpp",
		"/home/greglindsey/personal/projects/MetaHack/map/Map.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityFancyAsciiView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/NullGameRules.h",
		"/home/greglindsey/personal/projects/MetaHack/services/IGameRules.h",
		"/home/greglindsey/personal/projects/MetaHack/services/FileSystemGameRules.h",
		"/home/greglindsey/personal/projects/MetaHack/services/FileSystemGameRules.cpp",
		"/home/greglindsey/personal/projects/MetaHack/config/Strings.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/MapTileFancyAsciiView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/MapFancyAsciiView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/IConfigSettings.h",
		"/home/greglindsey/personal/projects/MetaHack/services/IConfigSettings.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/FancyAsciiGraphicViews.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/FallbackConfigSettings.h",
		"/home/greglindsey/personal/projects/MetaHack/config/Strings.h",
		"/home/greglindsey/personal/projects/MetaHack/config/Paths.h",
		"/home/greglindsey/personal/projects/MetaHack/config/Paths.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/Strings.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/Strings.h",
		"/home/greglindsey/personal/projects/MetaHack/services/NullStrings.h",
		"/home/greglindsey/personal/projects/MetaHack/services/IStrings.h",
		"/home/greglindsey/personal/projects/MetaHack/include/stdafx.h",
		"/home/greglindsey/personal/projects/MetaHack/services/DefaultPaths.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/DefaultPaths.h",
		"/home/greglindsey/personal/projects/MetaHack/services/IPaths.cpp",
		"/home/greglindsey/personal/projects/MetaHack/services/IPaths.h",
		"/home/greglindsey/personal/projects/MetaHack/config/Config.h",
		"/home/greglindsey/personal/projects/MetaHack/config/Config.cpp",
		"/home/greglindsey/personal/projects/MetaHack/components/ComponentInventory.cpp",
		"/home/greglindsey/personal/projects/MetaHack/components/ComponentInventory.h",
		"/home/greglindsey/personal/projects/MetaHack/components/ComponentManager.h",
		"/home/greglindsey/personal/projects/MetaHack/systems/SystemNarrator.h",
		"/home/greglindsey/personal/projects/MetaHack/components/modifiers/Physical.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityCollectionGUIListView.h",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityCollectionGUIView.cpp",
		"/home/greglindsey/personal/projects/MetaHack/views/EntityCollectionGUIView.h",
		"/home/greglindsey/personal/projects/MetaHack/inventory/InventorySlot.h",
		"/home/greglindsey/personal/projects/MetaHack/sfgui_extensions/DecoratedWidget.hpp",
		"/home/greglindsey/personal/projects/MetaHack/sfgui_extensions/Decorated.hpp",
		"/home/greglindsey/personal/projects/MetaHack/design_patterns/Event.cpp",
		"/home/greglindsey/personal/projects/MetaHack/design_patterns/Event.h"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 136.6,
		"where_history":
		[
			"*.c,*.cpp,*.h",
			"Config::settings()",
			"*.c,*.cpp,*.h",
			"",
			"types",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"handle_key_press",
			"UIEvents::EventKeyPressed",
			"handleSFMLEvent",
			"onEvent",
			"UIEvents::EventKeyPressed::id",
			"handle_key_press",
			"fs",
			"using fs",
			"calcStatusAreaDims",
			"calcInventoryDims",
			"_drawPreChildren",
			"m_inventoryArea",
			"MapView2D",
			"size",
			"the_desktop",
			"renderMap",
			"render",
			"the_desktop",
			"metagui",
			"GUIObject",
			"GUIDesktop",
			"Desktop",
			"GUIWindow",
			"Window",
			"metagui::Window",
			"TitleBar",
			"GUITitleBar",
			"StringPair",
			"GUILabel",
			"services/Service.h",
			"IGraphicViews",
			"graphicViews",
			"views",
			"IGraphicViews",
			"Null",
			"Standard2DGraphicViews",
			"MapStandard2DView",
			"loadViewResourcesFor",
			"createMapView",
			"MapStandard2DView",
			"m_views",
			"MapTileStandard2DView",
			"createMapTileView",
			"m_views",
			"hasTilesFor",
			"loadViewResourcesFor",
			"createEntityView",
			"m_views",
			"m_tileSheet",
			"EntityStandard2DView",
			"createEntityView",
			"EntityGUIIconView",
			"EntityGUIView",
			"IGraphicViews",
			"removeObserver",
			"GameLog",
			"m_model",
			"MessageLog",
			"IMessageLog",
			"GAME",
			"#include \"services/IMessageLog.h\"",
			"IMessageLog",
			"Ascii",
			"IGameRules",
			"S<IGameRules>()",
			"IGameRules",
			"#include \"services/IGameRules.h\"",
			"S<IConfigSettings>()",
			"IConfigSettings",
			"#include \"services/IConfigSettings.h\"",
			"IConfigSettings",
			"m_layout#include",
			"IStrings",
			"S<IStrings>()",
			"IStrings",
			"#include \"services/IStrings.h\"\n",
			"#include \"services/IStrings.h\"",
			"IStrings",
			"FileName",
			"IPaths",
			"DefaultPaths",
			"EXPAND",
			"InventorySlot",
			"CloseHandle",
			"ResizeHandle",
			"CollapseHandle",
			"CloseHandle",
			"m_gameState.components",
			"GAME.components",
			"Got event",
			"Object.cpp",
			"NEW",
			"demangle",
			"addObserver",
			"demangle",
			"CLOG",
			"SYSTEMS",
			"\"StatusArea\"",
			"  \n",
			"doEventSubscriptions_V",
			"IKeyBuffer",
			"KeyBuffer",
			"\"AppStateGameMode\"",
			"\"GUI\"",
			"MessageLogView",
			"::id",
			"onEvent_V",
			"get_enter",
			"m_box",
			"SetCursor",
			"std::bind",
			"\"GUI\"",
			"frame_clock",
			"VectorMap",
			"m_vectorMap",
			"VectorMap",
			"VectorMap.h",
			"int.h",
			"ModifiableInt",
			"bool.h",
			"ModifiableBool",
			"0ULL",
			"m_modifierArrayMap",
			"ModifierArrayMap",
			"types/GameObject.h",
			"getDisplayName",
			"GameObject",
			"getDisplayName"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"MapView2D",
			"MapTileView2D",
			"EntityView2D",
			"Config::bible()",
			"Config::settings()",
			"#include",
			"Config::strings()",
			"m_layout",
			"frameClock",
			"DequeMap",
			"m_dequeMap",
			"DequeMap",
			"int",
			"bool",
			"m_modifierVectorMap",
			"ModifierVectorMap",
			"**TODO**"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26909,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										242,
										253
									],
									[
										444,
										455
									],
									[
										671,
										682
									],
									[
										873,
										884
									],
									[
										943,
										954
									],
									[
										1038,
										1049
									],
									[
										1133,
										1144
									],
									[
										1336,
										1347
									],
									[
										1563,
										1574
									],
									[
										1908,
										1919
									],
									[
										2298,
										2309
									],
									[
										2781,
										2783
									],
									[
										2848,
										2850
									],
									[
										2892,
										2894
									],
									[
										3146,
										3148
									],
									[
										3215,
										3217
									],
									[
										3261,
										3263
									],
									[
										3463,
										3465
									],
									[
										3635,
										3637
									],
									[
										3660,
										3662
									],
									[
										3787,
										3789
									],
									[
										3811,
										3813
									],
									[
										3920,
										3922
									],
									[
										4021,
										4023
									],
									[
										4030,
										4032
									],
									[
										4085,
										4087
									],
									[
										4241,
										4243
									],
									[
										4520,
										4522
									],
									[
										4763,
										4765
									],
									[
										4917,
										4919
									],
									[
										5346,
										5348
									],
									[
										5564,
										5566
									],
									[
										5667,
										5669
									],
									[
										5692,
										5694
									],
									[
										5837,
										5839
									],
									[
										5902,
										5904
									],
									[
										5931,
										5933
									],
									[
										6100,
										6102
									],
									[
										6312,
										6314
									],
									[
										6405,
										6407
									],
									[
										6415,
										6417
									],
									[
										6650,
										6652
									],
									[
										6689,
										6691
									],
									[
										6723,
										6725
									],
									[
										6797,
										6799
									],
									[
										6992,
										6994
									],
									[
										7031,
										7033
									],
									[
										7065,
										7067
									],
									[
										7139,
										7141
									],
									[
										7476,
										7478
									],
									[
										7628,
										7630
									],
									[
										7831,
										7833
									],
									[
										7860,
										7862
									],
									[
										8052,
										8054
									],
									[
										8273,
										8275
									],
									[
										8450,
										8452
									],
									[
										8458,
										8460
									],
									[
										8634,
										8636
									],
									[
										8642,
										8644
									],
									[
										8854,
										8856
									],
									[
										9060,
										9062
									],
									[
										9079,
										9081
									],
									[
										9144,
										9146
									],
									[
										9338,
										9340
									],
									[
										9385,
										9387
									],
									[
										9559,
										9561
									],
									[
										9570,
										9572
									],
									[
										9753,
										9755
									],
									[
										10084,
										10086
									],
									[
										10309,
										10311
									],
									[
										10320,
										10322
									],
									[
										10598,
										10600
									],
									[
										10843,
										10845
									],
									[
										11177,
										11179
									],
									[
										11328,
										11330
									],
									[
										11590,
										11592
									],
									[
										11800,
										11802
									],
									[
										11872,
										11874
									],
									[
										11905,
										11907
									],
									[
										12089,
										12091
									],
									[
										12137,
										12139
									],
									[
										12513,
										12515
									],
									[
										12666,
										12668
									],
									[
										13014,
										13016
									],
									[
										13246,
										13248
									],
									[
										13406,
										13408
									],
									[
										13508,
										13510
									],
									[
										13658,
										13660
									],
									[
										13759,
										13761
									],
									[
										13862,
										13864
									],
									[
										14020,
										14022
									],
									[
										14123,
										14125
									],
									[
										14332,
										14334
									],
									[
										14516,
										14518
									],
									[
										14683,
										14685
									],
									[
										14851,
										14853
									],
									[
										15018,
										15020
									],
									[
										15131,
										15133
									],
									[
										15300,
										15302
									],
									[
										15413,
										15415
									],
									[
										15621,
										15623
									],
									[
										15781,
										15783
									],
									[
										15883,
										15885
									],
									[
										16033,
										16035
									],
									[
										16134,
										16136
									],
									[
										16237,
										16239
									],
									[
										16395,
										16397
									],
									[
										16498,
										16500
									],
									[
										16801,
										16803
									],
									[
										16824,
										16826
									],
									[
										16911,
										16913
									],
									[
										17197,
										17199
									],
									[
										17453,
										17455
									],
									[
										17563,
										17565
									],
									[
										17612,
										17614
									],
									[
										17774,
										17776
									],
									[
										17948,
										17950
									],
									[
										17968,
										17970
									],
									[
										18182,
										18184
									],
									[
										18402,
										18404
									],
									[
										18632,
										18634
									],
									[
										18852,
										18854
									],
									[
										19071,
										19073
									],
									[
										19114,
										19116
									],
									[
										19163,
										19165
									],
									[
										19315,
										19317
									],
									[
										19478,
										19480
									],
									[
										19505,
										19507
									],
									[
										19740,
										19756
									],
									[
										19969,
										19985
									],
									[
										20213,
										20229
									],
									[
										20601,
										20617
									],
									[
										20830,
										20846
									],
									[
										21070,
										21086
									],
									[
										21495,
										21524
									],
									[
										21779,
										21808
									],
									[
										21952,
										21981
									],
									[
										22252,
										22267
									],
									[
										22402,
										22417
									],
									[
										22548,
										22563
									],
									[
										22772,
										22787
									],
									[
										22865,
										22880
									],
									[
										23193,
										23218
									],
									[
										23371,
										23396
									],
									[
										23736,
										23761
									],
									[
										23989,
										24014
									],
									[
										24137,
										24162
									],
									[
										24214,
										24239
									],
									[
										24454,
										24479
									],
									[
										24644,
										24669
									],
									[
										24957,
										24982
									],
									[
										25274,
										25299
									],
									[
										25369,
										25394
									],
									[
										25706,
										25731
									],
									[
										25947,
										25972
									],
									[
										26230,
										26246
									],
									[
										26459,
										26475
									],
									[
										26703,
										26719
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								26457,
								26457
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										26530,
										26531
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										26344,
										26345
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"default_dir": "/home/greglindsey/personal/projects/MetaHack/game",
							"detect_indentation": false,
							"git_gutter_is_enabled": false,
							"line_numbers": false,
							"output_tag": 11,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1554397628.52,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 15730.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "game/App.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11124,
						"regions":
						{
						},
						"selection":
						[
							[
								11090,
								11090
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										11120,
										11121
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										10210,
										10211
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554401051.46,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8179.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "game/App.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3964,
						"regions":
						{
						},
						"selection":
						[
							[
								3314,
								3314
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3495,
										3496
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										500,
										501
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554397711.81,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2414.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "game/AppState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 454,
						"regions":
						{
						},
						"selection":
						[
							[
								395,
								395
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										391,
										392
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										130,
										131
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										452,
										453
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										394,
										395
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554392182.15,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "game/AppState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 456,
						"regions":
						{
						},
						"selection":
						[
							[
								456,
								456
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										436,
										441
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554397456.21,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "game/AppStateGameMode.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41261,
						"regions":
						{
						},
						"selection":
						[
							[
								1944,
								1944
							]
						],
						"settings":
						{
							"SL.339.region_keys":
							[
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										8457,
										8458
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										6744,
										6745
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2054,
										2055
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1851,
										1852
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554397632.82,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 792.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "game/AppStateGameMode.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3261,
						"regions":
						{
						},
						"selection":
						[
							[
								323,
								323
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1253,
										1254
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1215,
										1216
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554397305.61,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "game/AppStateMainMenu.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1949,
						"regions":
						{
						},
						"selection":
						[
							[
								1915,
								1915
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1947,
										1948
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1908,
										1909
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554393538.65,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "game/AppStateMainMenu.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 901,
						"regions":
						{
						},
						"selection":
						[
							[
								598,
								598
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										868,
										869
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										185,
										186
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "game/AppStateSplashScreen.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1179,
						"regions":
						{
						},
						"selection":
						[
							[
								1080,
								1080
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1080,
										1081
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										1009,
										1010
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554393046.2,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 389.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "game/AppStateSplashScreen.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 977,
						"regions":
						{
						},
						"selection":
						[
							[
								630,
								630
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										940,
										941
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										197,
										198
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554393076.61,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "config/Bible.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4782,
						"regions":
						{
						},
						"selection":
						[
							[
								108,
								108
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554394812.06,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24674,
						"regions":
						{
						},
						"selection":
						[
							[
								23630,
								23630
							]
						],
						"settings":
						{
							"SL.253.region_keys":
							[
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										21269,
										21270
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										20712,
										20713
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										23670,
										23671
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										23560,
										23561
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/CMake/CMake.sublime-syntax",
							"tab_size": 4,
							"tabs_extra_last_activated": 1554397006.24,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12269.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "views/EntityCollectionGUIListView.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2055,
						"regions":
						{
						},
						"selection":
						[
							[
								164,
								164
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554395696.15,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "views/EntityCollectionGUIListView.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 506,
						"regions":
						{
						},
						"selection":
						[
							[
								13,
								13
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tabs_extra_last_activated": 1554395509.97,
							"tabs_extra_last_activated_sheet_index": 13
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "gui/GUIDesktop.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3580,
						"regions":
						{
						},
						"selection":
						[
							[
								3470,
								3470
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3552,
										3553
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										182,
										183
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554397500.53,
							"tabs_extra_last_activated_sheet_index": 15,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1821.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "gui/GUIDesktop.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1315,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": 433,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554397461.93,
							"tabs_extra_last_activated_sheet_index": 15,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "inventory/InventoryArea.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13703,
						"regions":
						{
						},
						"selection":
						[
							[
								3901,
								3901
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										3845,
										3846
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										3783,
										3784
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										4519,
										4520
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554395461.97,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1804.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "inventory/InventoryArea.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1683,
						"regions":
						{
						},
						"selection":
						[
							[
								327,
								327
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1680,
										1681
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										325,
										326
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554395304.12,
							"tabs_extra_last_activated_sheet_index": 14,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "views/MapTileView2D.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20245,
						"regions":
						{
						},
						"selection":
						[
							[
								630,
								630
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										630,
										631
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										628,
										629
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554396007.63,
							"tabs_extra_last_activated_sheet_index": 17,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "views/MapTileView2D.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3126,
						"regions":
						{
						},
						"selection":
						[
							[
								355,
								355
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3123,
										3124
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										327,
										328
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554396202.59,
							"tabs_extra_last_activated_sheet_index": 18,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "views/MapView.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1343,
						"regions":
						{
						},
						"selection":
						[
							[
								148,
								148
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554395869.81,
							"tabs_extra_last_activated_sheet_index": 17,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "views/MapView.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1835,
						"regions":
						{
						},
						"selection":
						[
							[
								65,
								65
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554395698.55,
							"tabs_extra_last_activated_sheet_index": 18,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "views/MapView2D.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5115,
						"regions":
						{
						},
						"selection":
						[
							[
								623,
								623
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										332,
										333
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										248,
										249
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										625,
										626
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										344,
										345
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554396150.34,
							"tabs_extra_last_activated_sheet_index": 21,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "views/MapView2D.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1757,
						"regions":
						{
						},
						"selection":
						[
							[
								493,
								493
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										514,
										515
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										475,
										476
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554395907.98,
							"tabs_extra_last_activated_sheet_index": 20,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 352.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "game_windows/MessageLogView.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4495,
						"regions":
						{
						},
						"selection":
						[
							[
								3017,
								3017
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										3006,
										3007
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										2964,
										2965
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3099,
										3100
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										599,
										600
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554397031.77,
							"tabs_extra_last_activated_sheet_index": 23,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 924.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "game_windows/MessageLogView.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2552,
						"regions":
						{
						},
						"selection":
						[
							[
								444,
								444
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										2443,
										2448
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										695,
										696
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										442,
										443
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554395055.53,
							"tabs_extra_last_activated_sheet_index": 20,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 242.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "game_windows/StatusArea.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11378,
						"regions":
						{
						},
						"selection":
						[
							[
								5657,
								5657
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										5856,
										5857
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554397036.5,
							"tabs_extra_last_activated_sheet_index": 26,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2520.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "game_windows/StatusArea.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1381,
						"regions":
						{
						},
						"selection":
						[
							[
								637,
								637
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1315,
										1320
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1354,
										1355
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										216,
										217
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554393920.41,
							"tabs_extra_last_activated_sheet_index": 21,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "tilesheet/TileSheet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12155,
						"regions":
						{
						},
						"selection":
						[
							[
								144,
								144
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										143,
										144
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										128,
										129
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554394807.7,
							"tabs_extra_last_activated_sheet_index": 24,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "tilesheet/TileSheet.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4389,
						"regions":
						{
						},
						"selection":
						[
							[
								50,
								50
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1554394811.18,
							"tabs_extra_last_activated_sheet_index": 25,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 52.8
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 196.600006104
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "MetaHack.sublime-project",
	"replace":
	{
		"height": 79.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"AppState.h",
				"game/AppState.h"
			],
			[
				"MapTileView2D.cpp",
				"views/MapTileView2D.cpp"
			],
			[
				"MapTileView2D.h",
				"views/MapTileView2D.h"
			],
			[
				"EntityCollection",
				"views/EntityCollectionGUIListView.cpp"
			],
			[
				"EntityCollectionGUIListView.h",
				"views/EntityCollectionGUIListView.h"
			],
			[
				"TileSheet.h",
				"tilesheet/TileSheet.h"
			],
			[
				"TileS",
				"tilesheet/TileSheet.cpp"
			],
			[
				"StatusArea",
				"game_windows/StatusArea.cpp"
			],
			[
				"AppStateGameMode.cpp",
				"game/AppStateGameMode.cpp"
			],
			[
				"MessageLogView.cpp",
				"game_windows/MessageLogView.cpp"
			],
			[
				"Splash",
				"game/AppStateSplashScreen.cpp"
			],
			[
				"AppStateMain",
				"game/AppStateMainMenu.h"
			],
			[
				"AppStateMainMenu.cpp",
				"game/AppStateMainMenu.cpp"
			],
			[
				"MapView2D.cpp",
				"views/MapView2D.cpp"
			],
			[
				"MapView2D.h",
				"views/MapView2D.h"
			],
			[
				"MapView.h",
				"views/MapView.h"
			],
			[
				"App.cpp",
				"game/App.cpp"
			],
			[
				"AppStateGameMode.h",
				"game/AppStateGameMode.h"
			],
			[
				"TileSheet.cpp",
				"tilesheet/TileSheet.cpp"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"GUIObject.h",
				"gui/GUIObject.h"
			],
			[
				"Message",
				"game_windows/MessageLogView.h"
			],
			[
				"GameState.h",
				"game/GameState.h"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"Action.h",
				"actions/Action.h"
			],
			[
				"Attack",
				"actions/ActionAttack.cpp"
			],
			[
				"Action.cpp",
				"actions/Action.cpp"
			],
			[
				"stdafx.h",
				"include/stdafx.h"
			],
			[
				"C",
				"CMakeLists.txt"
			],
			[
				"SystemNarrator.h",
				"systems/SystemNarrator.h"
			],
			[
				"ComponentInventory.cpp",
				"components/ComponentInventory.cpp"
			],
			[
				"ComponentInventory.h",
				"components/ComponentInventory.h"
			],
			[
				"Event.cpp",
				"design_patterns/Event.cpp"
			],
			[
				"Manager.cpp",
				"systems/Manager.cpp"
			],
			[
				"App.h",
				"game/App.h"
			],
			[
				"CMakeLists.txt",
				"CMakeLists.txt"
			],
			[
				"Event.h",
				"design_patterns/Event.h"
			],
			[
				"Object.cpp",
				"design_patterns/Object.cpp"
			],
			[
				"Object.h",
				"design_patterns/Object.h"
			],
			[
				"EntityId.cpp",
				"entity/EntityId.cpp"
			],
			[
				"EntityId.h",
				"entity/EntityId.h"
			],
			[
				"COmponentPosition.h",
				"components/ComponentPosition.h"
			],
			[
				"GUIObject.cpp",
				"gui/GUIObject.cpp"
			],
			[
				"SystemCho",
				"systems/SystemChoreographer.cpp"
			],
			[
				"Status",
				"game_windows/StatusArea.cpp"
			],
			[
				"EntityId.",
				"entity/EntityId.cpp"
			],
			[
				"EntityView.cpp",
				"views/EntityView.cpp"
			],
			[
				"InventorySelection.h",
				"inventory/InventorySelection.h"
			],
			[
				"UI.txt",
				"text/UI.txt"
			],
			[
				".gitmodules",
				".gitmodules"
			],
			[
				"CMak",
				"CMakeLists.txt"
			],
			[
				"StatusArea.cpp",
				"game_windows/StatusArea.cpp"
			],
			[
				"MessageLogView",
				"game_windows/MessageLogView.cpp"
			],
			[
				"MessageLog.cpp",
				"services/MessageLog.cpp"
			],
			[
				"KeyBuffer.cpp",
				"keybuffer/KeyBuffer.cpp"
			],
			[
				"KeyBuffer.h",
				"keybuffer/KeyBuffer.h"
			],
			[
				"Key",
				"keybuffer/KeyBuffer.cpp"
			],
			[
				"main.cpp",
				"main.cpp"
			],
			[
				"App.c",
				"game/App.cpp"
			],
			[
				"MapTile.cpp",
				"maptile/MapTile.cpp"
			],
			[
				"ComponentManager.cpp",
				"components/ComponentManager.cpp"
			],
			[
				"ComponentInventory",
				"components/ComponentInventory.cpp"
			],
			[
				"ComponentHealth.cpp",
				"components/ComponentHealth.cpp"
			],
			[
				"ActionCRTP.h",
				"actions/ActionCRTP.h"
			],
			[
				"CMakeL",
				"CMakeLists.txt"
			],
			[
				"GameObject.h",
				"types/GameObject.h"
			],
			[
				"doxygen_log.txt",
				"doxygen_log.txt"
			],
			[
				"LuaObject.h",
				"lua/LuaObject.h"
			],
			[
				"Visitor.h",
				"design_patterns/Visitor.h"
			],
			[
				"Color.h",
				"types/Color.h"
			],
			[
				"LuaObject.cpp",
				"lua/LuaObject.cpp"
			],
			[
				"main",
				"main.cpp"
			],
			[
				"EntityFac",
				"entity/EntityFactory.cpp"
			],
			[
				"FindSFGUI",
				"cmake_modules/FindSFGUI.cmake"
			],
			[
				"Vec2.cpp",
				"types/Vec2.cpp"
			],
			[
				"Vec2.h",
				"types/Vec2.h"
			],
			[
				"resque.rb",
				"config/initializers/resque.rb"
			],
			[
				"environment.rb",
				"config/environment.rb"
			],
			[
				"Gemfile.lock",
				"Gemfile.lock"
			],
			[
				"application.rb",
				"config/application.rb"
			],
			[
				"spec_helper.rb",
				"spec/spec_helper.rb"
			],
			[
				"Appr",
				"Appraisals"
			],
			[
				"candidate/home_controller",
				"app/controllers/candidate/home_controller.rb"
			],
			[
				"users_controller.rb",
				"app/controllers/users_controller.rb"
			],
			[
				"sessions_controller",
				"app/controllers/sessions_controller.rb"
			],
			[
				"root_routes",
				"config/routes/root_routes.rb"
			],
			[
				"routes.rb",
				"config/routes.rb"
			],
			[
				"v2_routes",
				"config/routes/api/v2.2_routes.rb"
			],
			[
				"rails_helper",
				"spec/rails_helper.rb"
			],
			[
				"event_attendees/repository.rb",
				"lib/event_attendees/repository.rb"
			],
			[
				"v2/r2/events_controller.rb",
				"app/controllers/api/v2/r2/events_controller.rb"
			],
			[
				"api_rou",
				"config/routes/api/v2.2_routes.rb"
			],
			[
				"application_controller_spec.rb",
				"spec/controllers/application_controller_spec.rb"
			],
			[
				"Gemfile",
				"Gemfile"
			],
			[
				"production",
				"config/environments/production.rb"
			],
			[
				"html_sanitiz",
				"spec/concern/html_sanitizer_concern_spec.rb"
			],
			[
				"html_strin",
				"spec/utility/html_string_sanitizer_spec.rb"
			],
			[
				"REA",
				"README.md"
			],
			[
				"README",
				"client/node_modules/colors/ReadMe.md"
			],
			[
				"html_string_",
				"spec/utility/html_string_sanitizer_spec.rb"
			],
			[
				"utility/html",
				"lib/utility/html_string_sanitizer.rb"
			],
			[
				".ruby-version",
				".ruby-version"
			],
			[
				"job_logging_spec",
				"spec/redis_jobs/job_logging_spec.rb"
			],
			[
				"redis_job",
				"lib/redis_jobs/base_job.rb"
			],
			[
				"redis_helper_spec.rb",
				"spec/recsolu/redis_helper_spec.rb"
			],
			[
				"redis_helper",
				"lib/recsolu/redis_helper.rb"
			],
			[
				"html_sanitizer_concern.rb",
				"app/controllers/concerns/html_sanitizer_concern.rb"
			],
			[
				"yellogger_spec",
				"spec/initializers/yellogger_spec.rb"
			],
			[
				"yellogger.rb",
				"config/initializers/yellogger.rb"
			],
			[
				"string_saniti",
				"spec/utility/html_string_sanitizer_spec.rb"
			],
			[
				"html_string",
				"lib/utility/html_string_sanitizer.rb"
			],
			[
				"workflow_attach",
				"app/models/workflow_attachment.rb"
			],
			[
				"rc_micro",
				"rc_microsoft_structure.sql"
			],
			[
				"spec/initi",
				"spec/initializers/yellogger_spec.rb"
			],
			[
				"application_record.rb",
				"app/models/application_record.rb"
			],
			[
				"html_string_sanitizer_spec",
				"spec/utility/html_string_sanitizer_spec.rb"
			],
			[
				"old_sanit",
				"lib/utility/sanitizers/old_html_input_sanitizer.rb"
			],
			[
				"html_sani",
				"spec/concern/html_sanitizer_concern_spec.rb"
			],
			[
				"html_",
				"lib/concerns/html_sanitizer_concern.rb"
			],
			[
				"html_string_sanitizer_spec.rb",
				"spec/utility/html_string_sanitizer_spec.rb"
			],
			[
				"html_string_sanitizer.rb",
				"lib/utility/html_string_sanitizer.rb"
			],
			[
				"old",
				"lib/utility/sanitizers/old_html_input_sanitizer.rb"
			],
			[
				"settings_controller",
				"app/controllers/users/candidates/profile/settings_controller.rb"
			],
			[
				"settings_controller_spec.rb",
				"spec/controllers/candidate/profile/settings_controller_spec.rb"
			],
			[
				"field_answer_formatter_spec",
				"spec/excel_exporter/utility/field_answer_formatter_spec.rb"
			],
			[
				"html_sanitizer_concern_spec.rb",
				"spec/concerns/html_sanitizer_concern_spec.rb"
			],
			[
				"html_string_sani",
				"lib/utility/html_string_sanitizer.rb"
			],
			[
				"Gemfiles",
				"client/node_modules/draft-js/lib/getTextContentFromFiles.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/apps/yellogger.sublime-project"
			]
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 326.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
